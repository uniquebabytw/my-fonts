/*****************************************************************
 * 功能：輸入文字後，逐一檢查每個框對應字型是否支援該文字。
 *       - 若支援 → 顯示使用者輸入
 *       - 不支援 → 顯示「無法支援」
 *****************************************************************/
document.addEventListener('DOMContentLoaded', () => {
  const inputName  = document.getElementById('nameInput');
  const mainTexts  = document.querySelectorAll('.main-text');

  // 取得第一個 font-family 名稱（去掉引號與空白）
  const getPrimaryFont = (fontFamilyString) =>
    fontFamilyString.split(',')[0].replace(/["']/g, '').trim();

  // 利用 CSS Font Loading API 檢查字型是否能呈現文字
  const isFontSupported = (text, font) => {
    // 若瀏覽器不支援 Font Loading API，直接返回 true
    if (!(document.fonts && document.fonts.check)) return true;
    // 檢查字型是否含有所有字元
    return document.fonts.check(`16px "${font}"`, text);
  };

  // 更新所有預覽框
  const updatePreviews = (value) => {
    mainTexts.forEach(el => {
      if (value === '') {
        // 空字串 → 顯示預設提示文字
        el.textContent = '預覽字型';
        el.classList.add('placeholder-text');
        return;
      }

      // 取該框的主要字型
      const primaryFont = getPrimaryFont(getComputedStyle(el).fontFamily);
      const supported   = isFontSupported(value, primaryFont);

      el.textContent = supported ? value : '無法支援';
      el.classList.remove('placeholder-text');
    });
  };

  // 監聽輸入框
  inputName.addEventListener('input', () => {
    updatePreviews(inputName.value.trim());
  });

  // 字型檔載入完畢後，再試一次以避免「載入前誤判」
  document.fonts.ready.then(() => {
    updatePreviews(inputName.value.trim());
  });
});
